                             *** COMMANDS ***

Commands sre the same as system procedures in that they take 0 or more arguments
however they do not return any value and cannot be used as arguments to 
procedures or other commands. In fact their presence indicates the end of
an expression.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
BK <pixels>

Move the turtle backwards the given number of pixels. The turtles heading 
does not change by 180 degrees.

Eg: BK 100

See: FD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
BYE

Exits the interpreter and returns to the unix shell.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CD <directory>

Changes the current directory to the one given.

Eg: CD "programs"

See: LOAD, SAVE
See sysprocs: DIR, GETDIR

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CHIST 

Clears the current console command history.

See: HIST

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CLEAR

Clears the graphics window but unlike CS it does not reset the turtle.

See: CS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CS

Clears the graphics window, resets the window background colour to black,
resets the line width to 1 and style to solid, places the turtle back at its 
home position, resets its heading to 0 degrees and resets the pen colour to 
white.

See: CT, CLEAR, HOME

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
CT

Clears the text terminal window.

See: CS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DEC :<variable> 

Subtract 1 from the variable. This is a convenient shorthand for a common 
action and is the same as doing MAKE <var> <var> - 1. Note that unlike 
MAKE(LOC) it will not create a variable if it does not exist. Eg:

? make "cnt" 10
? dec :cnt
? :cnt
9

See: INC, MAKE, MAKELOC

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DEG

Sets the angle mode to degrees and updates the $angle_mode system variable. This
affects the trigonometry procedures and the turtle LT and RT commands.

? deg sin(90)
1.000000

See: RAD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
DOT <x> <y>

This draws a dot in the current turtle pen colour at the given window position
but it does not move the turtle itself.

Eg: DOT 100 200

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
EAT <expression>

This prevents the value of the expression being displayed on screen. This is
useful for when calling procedures that return a value but you don't want it
to appear. For example when using RC or RL to pause a program until the user 
interacts. If EAT wasn't used then the result would be displated. Eg:

? rc 0

? eat rc 0
? 

See: PR, WR

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ED <user procedure> <line number> 
ED <user procedure> <line number> <line text>

The EDit command allows procedures to be edited from the Logo command line
without recurse to a unix editor or completely rewriting it. Each procedure
has line numbers associated with its contents and to see them use POPSL.
Giving the text changes the text for that line, leaving that text out deletes
the line entirely. 
   The user procedure must not be quoted and the number must be explicit - ie
it cannot be in a variable or generated by an expression.

Eg: ED myproc 30 pr "hello"
    ED myproc 20 

See: TO, END, ER, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
END

This defines the end of a procedure. It can either be used on a line on its
own during definition or inline however it cannot be followed by any other 
command or expression.

Eg: TO one PR "one" END

See: TO, ED, ER, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ER <user procedure or global variable> * N

Erases user procedures or global variables. The procedure names must not be 
quoted which means you cannot use a variable or expression to provide it and
similarly the variable names must be prepended with ':'.

? er :a test :b
Global variable "a" erased.
User procedure "test" erased.
Global variable "b" erased.
?

See: ERALL, ERV, ERP, RESTART, PO, POL, POTS, POALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ERALL

Erase all user procedures, global variables, clears all watch variables and
sets the angle mode back to degrees.

Eg:

? erall
Global variables deleted and system variables reset.
User procedures deleted.
Watch variables list cleared.
READY
?

See: ER, ERV, ERP, RESTART, PO, POL, POTS, POALL, DEG, RAD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ERV

Deletes all global variables.

See: ER, ERP, ERALL, RESTART

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ERP

Deletes all user procedures.

See: ER, ERV, ERALL, RESTART

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FD <pixels>

Move the turtle forwards the given number of pixels. 

Eg: FD 100
    FD 2 * 50

See: BK

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FENCE

This prevents the turtle leaving the window boundary. If it tries the command
fails with an error. Eg:

? fence
Turtle fenced.
? fd 1000
ERROR 38: Turtle out of bounds at "fd"

See: WINDOW, WRAP

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
FILL

This causes the area bounded by the shape drawn since SETFILL was called to
be filled in. It uses the X server fill system and may not work properly if
the shape is too complicated. Once FILL is called the fill flag is reset and
SETFILL must be called again to do another fill.

Eg: cs setfill repeat 4 [fd 100 rt 90] fill

See: SETFILL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
GO 
GO "<label>"

Jump to the named LABEL. If no label is given then it defaults to "". The label
name can be the result of an expression allowing switch type structures to be 
created. See programs/switch.lg

Eg:
MAKE "lab" "x" LABEL "x" PR "hello" GO :lab
DLABEL PR "Hello" GO

See: LABEL, DLABEL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HELP/SHELP 
HELP/SHELP <search pattern>

These give a list of the commands and system procedures. HELP returns them in
order of definition inside LOGO which means related commands and procedures are
grouped together. SHELP sorts them into alphabetic order. If a pattern is given
then only ones that match the pattern are printed. The patten matching is case
insensitive.

Eg: HELP "s*"
    SHELP "*e*"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HIST    
HIST <number of lines>

Shows the command history. Eg:

? fd 100
? rt 90
? hist
Command history
---------------
1   fd 100
2   rt 90
?

See: CHIST

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HOME

This returns the turtle to its home location which is always the middle of
the current window. If the window size is changed the home location is 
adjusted to reflect this.

See: CLEAR, CS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HT

Hide turtle. After using thie command the turtle will no longer be seen. This
leads to MUCH quicker drawing times so it is recommended to use this when
doing complex drawing tasks.

Eg: CLEAR HT REPEAT 20 [REPEAT 180 [FD 1 RT 2] RT 18] ST

See: ST

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
HW

Hide (unmap) the graphics window if it is currently visible (mapped). This 
can speed up graphics drawing.

See: SW

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
INC :<variable> 

Add 1 to the variable. This is a convenient shorthand for a common action and 
is the same as doing MAKE <var> <var> + 1. Note that unlike MAKE(LOC) it will 
not create a variable if it does not exist. Eg:

? make "cnt" 10
? inc :cnt
? :cnt
11

See: DEC, MAKE, MAKELOC

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
IF <expression> [true block] [else block]

If the expression evaluates to true - which is a non zero numeric, a non empty
string and a non empty list - then the true block is executed else the false
block is executed if it is given (if no else block is given then nothing 
happens). Eg:

IF 1 + 1 = 2 ["true"] ["false"]
IF 1 + 1 = 3 ["true"] ["false"]
IF [] [] ["empty list"] 
IF "" ["non empty string"]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LABEL "<name>"/DLABEL

LABEL-GO is one of the 2 looping constructs available in LOGO along with 
REPEAT. The label command takes a string label name which is used by GO to 
jump either forwards or backwards to. DLABEL is simply a default anonymous label
which will be jumped to by GO if its string does not match any other label.
This allows simple switch type constructs to be created. See programs/switch.lg

Eg:
LABEL "x" pr "loop" go "x"
DLABEL pr "loop" go ""

See: GO

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LOAD "<path>" ["<procedure name>"]

This loads all the LOGO procedures found in the file (unless a specific name is
given in which case it only loads that one) and directly executes
any statements in the file not in a procedure**. If the .lg file extension is
not given then it is automatically appended. Wildcards are supported.

Eg: LOAD "programs/flower"
    LOAD "programs/flower.lg"
    LOAD "prog*/??ower.lg"
    LOAD "myprocs" "proc1"

Note that wildcards cannot be used in the optional procedure name but the
name can be "" which means all files in case you wish to use a variable to
determine what to load.

** Direct statements cannot be saved into a file by LOGO, they must be added
   in an external editor.

See: SAVE, CD
See sysprocs: DIR, GETDIR

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
LT <angle>

Left turn - turn the turtle anticlockwise by the given number of degrees or
radians depending on the angle mode.

? rad rt $pi   <-- Turns the turtle by 180 degrees

See: RT, DEG, RAD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
MAKE/MAKELOC "<variable name>" <expression>

These create and set variables. If the variable does not exist it is created
then set otherwise it is just set. The difference between the commands is that 
MAKE creates global variables which can be accessed anywhere but MAKELOC 
creates local variables that only exist in the scope of the procedure it is 
called in. It cannot be used outside of a procedure. MAKELOC is also required
to set procedure parameter variables since if MAKE is used a duplicate 
declaration error will occur. Eg:

MAKE "cnt" 0
REPEAT 4 [make "cnt" (:cnt + 1)] :cnt
MAKE "cnt" "hello" :cnt

TO test :x
	MAKELOC "x" 123
	:x
END

See: INC, DEC, PONS, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
OP [<value>]

This stands for OutPut and is the return command for procedures. The return
value is optional. Eg:

TO test
   OP "test result!"
END

See: TO, END

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PD  

Pen down. The turtle will draw lines when it moves when the pen is down.

See: PU

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PO/POL <procedure name>

These prints out the definition of the given procedure with POL adding line 
numbers. The procedure name must not be quoted which means it cannot be the 
result of an expression.

Eg:

? po flower
TO flower :cnt 
	CS HT
	MAKE "ang" 360 / :cnt
	MAKE "col" 0
	MAKE "coladd" $num_colours / :cnt
	REPEAT :cnt [SETPC :col REPEAT 4 [FD 100 RT 90] RT :ang MAKE "col" :col + :coladd]
	ST
END
? pol flower
TO flower :cnt 
10 	CS HT
20 	MAKE "ang" 360 / :cnt
30 	MAKE "col" 0
40 	MAKE "coladd" $num_colours / :cnt
50 	REPEAT :cnt [SETPC :col REPEAT 4 [FD 100 RT 90] RT :ang MAKE "col" :col + :coladd]
60 	ST
END

See: POPS, POPSL, POTS, POSF, POALL, ER, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
POALL 

This prints out everything - variables, procedure definitions and system flags.

See: PO, PONS, POSF

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PONS

Print Out NameS - this prints out the names and values of all current system
and user variables.

See: POALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
POPS/POPSL

These commands do the same as PO/POL except they print out all the defined
procedures.

See: PO, POL, POTS, POALL, ER, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
POSF

This prints out the status of various system flags.

See: POALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
POTS

This prints out the defined procedure titles and interfaces, not the body.

Eg:
? pots
User procedures
---------------
TO flower :cnt 
TO celtic :num 

See: PO, POL, POPS, POPSL, POALL, ER, ERALL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PR
PR <expression>

This is the main print commands and print out the result of the expression
followed by a newline (unlike WR which does not). If an expression is given on 
its own then PR is silently called to display its result. Some C style escape 
codes are supported - \b \n \r \t so PR "hello" is the same as entering 
PR "hello\n"

eg: PR "hello world"

See: WR, EAT
See system procs: FMT, RC, RL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PU

Pen up. When the pen is up the turtle will not draw when it moves.

Eg: CS PU FD 100

See: PD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RAD

Sets the angle mode to radians and updates the $angle_mode system variable. This
affects the trigonometry procedures and the turtle LT and RT commands.

? deg sin(90)
1.000000
? rad sin(90)
0.893997
? home rt $pi    <-- Will turn the turtle 180 degrees

See: DEG

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

REM
REM <text>

Everything that follows this command until the end of the line is ignored so
it allows you to embed comments in the code. A shortcut for the command is a
semi colon. Eg:

REM Logo will ignore this text
; And this

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RENUM <user procedure>

Procedure lines are numbered in order to facilitate editing with the ED command.
They normally go up in steps of 10 but when new lines have been inserted this
will not usually be the case. This allows the lines to be renumbered back to
steps on 10. Eg:

? pol test
TO test 
10 	PR "hello"
15 	PR "cruel"
20 	PR "world"
END
? renum test
User procedure "test" renumbered.
? pol test
TO test 
10 	PR "hello"
20 	PR "cruel"
30 	PR "world"
END

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
REPEAT <times expression> [<commands>]

Repeat the commands in the block the given number of times returned by the
expression. This is Logos only built in looping construct, the only other way
of looping being either to use LABEL-GO or recursion with procedures.

Eg: REPEAT 4 [FD 100 RT 90]

See: LABEL, DLABEL, GO

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RESTART

This restarts the interpreter clearing everything and resetting all flags such
as indentation and tracing. Unlike ERALL and ERP it can be called from anywhere.

See: ERALL, ERV, ERP

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RT <angle>

Right turn the turtle clockwise by the given number of degrees or radians
depending on the angle mode.

? deg home rt 90
? rad rt $pi

See: LT, DEG, RAD

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
RUN [commands]
RUN "commands"

This command will run the commands in the list or string which allows you to
construct code segments on the fly. It also allows dynamic creation of user
procedures.

Eg:
? make "a" [repeat 10 [pr "hello"]]
? run :a
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
? make "b" "repeat 4 [fd 100 rt 90]"
run :b
?

See sysproc: EVAL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SAVE  "<file path>" ["<procedure name>"]

SAVE saves all the user procedures defined in memory into the given file unless
a specific procedure name is given in which case it only saves that one. If
the Logo extension .lg is not given then it is appended. Wildcards are 
supported in the directory portion of the path. Note that the procedure name 
be "" which means all files in case you wish to use a variable to determine 
what to save.

? pots
User procedures
---------------
TO flower :cnt 
TO circles :cnt 
? save "../pro*/test"
Saved 2 procedures.
? save "test2" "../??ograms/circles"
Saved 1 procedures.

See: LOAD, CD
See sysprocs: DIR, GETDIR

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SEED <number>

Sets the random seed value. The number must be >= 0.

See sysproc: RANDOM, SHUFFLE

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETBG <colour>

Set the window background colour.

Eg: SETBG RANDOM $num_colours - 1

See: SETPC, SETWINSZ

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETFILL

This tells Logo to remember the lines drawn by the turtle from now on and then
fill the drawn shape when FILL is called.

Eg: cs setfill repeat 4 [fd 100 rt 90] fill

See: FILL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETH <angle>

Set heading - set the turtles angle to the absolute value given. Zero degrees
is at the top of the window , 90 is to the right etc.

Eg: SETH 180

See: TOWARDS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETIND

Set indent. When set Logo will indent procedure listings between LABEL and GO
and will further nest indents with nested labels. Note that this doesn't always
work very well if a GO is embedded in a block or if a switch type structure
has been created using multiple labels which is why indenting is off by 
default. Eg:

? po test
TO test 
	DLABEL
	PR "hello"
	GO
END
? setind
User procedure label block indenting on.
? po test
TO test 
	DLABEL
		PR "hello"
	GO
END
? 

The -i command line option will enable indentation at startup.

See: PO, POL, POPS, POPSL

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETLW <width>

Sets the width of the line the turtle draws. Eg:

? setlw 10 fd 100

See: SETLS, SETPC, SETBG

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETLS "<style>"

Sets the style of the line the turtle draws. Options are SOLID, DASH and
DOUBLE_DASH. eg:

? setls "DASH" fd 100

See: SETLW 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETPC <colour>

Sets the turtle pen colour.

Eg: CS SETPC 10 FD 100

See: SETBG, SETLW

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETPOS <X position> <Y position>

This command combines SETX and SETY into one command. If you only wish to set
either the X or Y position then using SETX or SETY is more efficient.

Eg: SETPOS 100 100

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETSZ <turtle size>

This sets the size of each line making up the turtle. It can be zero and 
greater. Eg:

make "sz" 0
repeat 20 [setsz :sz make "sz" :sz + 5 wait 0.2]

See: SET*

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETWINSZ <width> <height>

This changes the size of the turtle window to the given dimensions.

eg: SETWINSZ 400 200

See: SETBG

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETX <pixel position>

Sets the turtles X position. If the pen is down the turtle will draw when it
moves.

eg: SETX 0

See: SETY, SETPOS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SETY <pixel position>

As SETX except it sets the Y position.

See: SETX, SETPOS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
ST

Show turtle. If the turtle is hidden it will reappear.

See: HT

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
SW

Show (map) window. If the window is hidden (unmapped) it will reappear.

See: HW

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
STOP

This stops execution of the current piece of code whether it is a directly
entered line or a procedure. eg:

? dlabel stop pr "loop" go
*** STOP ***

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TG

This toggles the turtle graphics subsystem between enabled and disabled. It can
error when enabling it if X windows isn't available. Disabling always succeeds.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TO <procedure name> [inline lines]
TO <procedure name> :param * N [inline lines]

This declares the beginning definition of a procedure. While in a procedure
definition the prompt changes to '>'. eg:

? to test :num
> pr "Num = " :num
> end
Procedure "test" defined.
?

Procedures can also be defined inline. Eg:

? to hello pr "Hello world!" end
Procedure "hello" defined.
?

This also allows definition to be deferred by storing it in a list then running
the list when required. Eg:

? make "myproc" [to hello pr "Hello world!" end]
? :myproc
[TO hello PR "Hello world!" END]
? run :myproc
Procedure "hello" defined.
?

See: END, ED

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TOWARDS <X position> <Y positions>

This sets the turtle angle so that is is pointing to the given location.

eg: cs towards 20 20

See: SETH

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TROFF

This switches tracing off.

See: TRON, TRONS

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
TRON/TRONS

These switch tracing on and off. When on tracing will show which commands,
system procedures or user procedures are being called just before they are 
executed. TRONS is the same as TRON except the argument tracing is stepped 
meaning the program is halted every time a tracing statement is printed and you
have to press a key for execution to continue. This is signified by a colon at 
the end of the tracing output. The format of the output is:

[<user procedure name>,<user procedure line number>,<type>,<exec name>]

If the execution is not taking place in a user procedure then procedure name 
and line number are - and 0 respectively. The type is one of 'C' for command, 
'S' for system procedure and 'U' for user procedure. Eg:

? tron 
Tracing on.
? pr abs -1
[-,0,C,PR]
[-,0,S,ABS]
1
? pops
[-,0,C,POPS]
User procedures
---------------
TO test 
	PR 123
END

? test
[-,0,C,PR]
[-,0,U,test]
[test,10,C,PR]
123
? trons
[-,0,C,TRONS]
Tracing on with stepping.
? test
[-,0,C,PR]: 
[-,0,U,test]: 
[test,10,C,PR]: 
123
?

In the final example PR is seen at the start as it is silently called to print
the output of the user procedure 'test'.

See: WATCH

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
UNWATCH 
UNWATCH [<:variable name> * N]

If called on its own this command clears the watch variable list completely
so no variables are being watched. If variable names are given then only those
variables are removed from the watch list. Eg:

? WATCH :a :b
Watching 2 variables.
? MAKE "a" 123
{G,a=123}
? MAKE "b" 234
{G,b=234}
? UNWATCH :a
Now watching 1 variable(s).
? make "a" 567
? 

See: WATCH

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WAIT <seconds>

Pause execution for the given number of seconds. The value can also be fractions
of a second.

Eg: cs repeat 4 [fd 100 wait 0.5 rt 90 wait 1]

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WATCH
WATCH :<var> * N

This allows variables to be watched and in addition to TRON allows full 
debugging of programs as they run. The variables do not have to exist when
WATCH is called allowing the watch of local procedure variables that are
created and destroyed on the fly. The output format is:

{<type>,<varname>=<value}

Where type is on of 'G' for a global variable, 'L' for a local variable and
'P' for a user procedure parameter.

If no variable list is given then all the
variables currently being watched are printed. Eg:

? pops 
User procedures
---------------
TO test :pa 
	MAKELOC "b" [1 2 "c"]
	MAKE "c" "global var"
END

? watch :a :b :c :pa
Watching 4 variables.
? watch
Watched variables: pa, b, c, a
? make "a" 123
{G,a=123}
? test 456
{P,pa=456}
{L,b=[1 2 "c"]}
{G,c="global var"}

See: TRON, TROFF

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WINDOW

This is the opposite of FENCE and allows the turtle to roam freely off the
window.

See: FENCE, WRAP

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WR <expression>

WRite is identical to PRint except it does not append a newline onto the
end of what it prints. This is useful for prompts. Eg:

? wr "Enter: " rl 1 pr
Enter: hello
hello
? 

See: PR, EAT

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
WRAP    

This makes the turtle wrap back into the window when it goes outside the 
window boundary. 

Eg: cs wrap setpos -100 (-100)

See: FENCE, WINDOW
